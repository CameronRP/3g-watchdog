#!/usr/bin/python3 -u

"""
3g-watchdog - monitors 3G connectivity and takes action if it's down
Copyright (C) 2018, The Cacophony Project

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
"""


import contextlib
import subprocess
import time
import yaml

MODEM_NETDEV = "usb0"
MODEM_VENDOR_PRODUCT = "19d2:1405"

TEST_HOSTS = ["8.8.8.8", "8.8.4.4"]
TEST_INTERVAL_SECS = 5 * 60

ATTINY_ADDRESS = 0x04

def parse_config():
    with open("/etc/cacophony/3g-watchdog.yaml", 'r') as stream:
        config = yaml.safe_load(stream)
        return config

class Modem:

    def __init__(self, pin):
        # Late import to simplify testing on developer machines.
        from RPi import GPIO

        self.power_pin = pin
        GPIO.setwarnings(False)
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.power_pin, GPIO.OUT)
        self.set_power(True)

    def cycle_power(self):
        self.set_power(False)
        print("waiting...")
        time.sleep(5)
        self.set_power(True)

    def set_power(self, on):
        from RPi import GPIO

        print("powering modem " + "on" if on else "off")
        GPIO.output(self.power_pin, GPIO.HIGH if on else GPIO.LOW)

    def is_present(self):
        exitcode = subprocess.call(
            ["lsusb", "-d", MODEM_VENDOR_PRODUCT], stdout=subprocess.DEVNULL
        )
        return exitcode == 0

def main():
    print("running")
    config = parse_config()
    new_hardware = has_new_hardware()
    modem = Modem(config['usb_power_pin'])

    if new_hardware:
        print("newer hardware detected: will reset by cycling modem power")
        reset = modem.cycle_power
    else:
        print("older hardware detected: will reset by rebooting")
        reset = reboot

    with contextlib.suppress(KeyboardInterrupt):
        no_link_count = 0
        while running():
            time.sleep(TEST_INTERVAL_SECS)

            if is_defroute_via_dev(MODEM_NETDEV):
                print("link is using USB modem")
                if not ping_hosts(TEST_HOSTS):
                    print("ping tests FAILED")
                    reset()
            elif modem.is_present():
                if new_hardware:
                    no_link_count += 1
                    if no_link_count >= 3:
                        print("modem detected, but no connection")
                        reset()
                        no_link_count = 0
            else:
                print("USB modem not detected")


def running():
    "This exists to support patching during tests"
    return True


def is_defroute_via_dev(netdev):
    output = subprocess.check_output(["ip", "route"], universal_newlines=True)
    search = " dev " + netdev + " "
    for line in output.splitlines():
        if line.startswith("default") and search in line:
            return True
    return False


def ping_hosts(addrs):
    # Try a number of times to allow for flaky connections. We want to
    # be really sure the link is down before taking action.
    for _ in range(5):
        for addr in addrs:
            if ping_host(addr):
                return True
    return False


def ping_host(addr):
    try:
        subprocess.check_call(
            [
                "ping",
                "-n",
                "-q",  # no DNS, quiet output
                "-c1",  # just need one response
                "-w30",  # wait up to 30s
                addr,
            ],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
    except subprocess.CalledProcessError:
        return False
    return True


def has_new_hardware():
    output = subprocess.check_output(
        ["i2cdetect", "-y", "1", hex(ATTINY_ADDRESS), hex(ATTINY_ADDRESS)],
        universal_newlines=True,
    )
    return " -- " not in output

def reboot():
    print("rebooting system")
    subprocess.check_call(["/sbin/reboot"])


if __name__ == "__main__":
    main()
