#!/usr/bin/python3 -u

import os
import subprocess
import sys
import time


MODEM_NETDEV = 'usb0'

TEST_HOSTS = [
    "8.8.8.8",
    "8.8.4.4",
    ]

TEST_INTERVAL_SECS = 300  # 5 mins

LAST_CHECK_FILE = '/var/run/check-3g'


def main():
    if not has_test_arg():
        print("'test' not provided on command line")
        return 0

    if not is_check_time():
        return 0

    if is_default_route_via_dev(MODEM_NETDEV):
        print("link is using USB modem")
        if ping_hosts(TEST_HOSTS):
            print("link ok")
        else:
            print("link NOT ok")
            return 255
    else:
        print("link is not using USB modem")

    set_last_check_time()
    return 0


def has_test_arg():
    args = sys.argv[1:]
    if len(args) != 1:
        return False
    return args[0] == 'test'


def is_check_time():
    now = time.time()
    last_check = get_last_check_time()

    if now < last_check:
        print("clock skew detected, forcing check")
        return True

    remaining = TEST_INTERVAL_SECS - (now - last_check)
    if remaining > 0:
        print("not time to check yet ({:.0f}s remain)".format(remaining))
        return False

    return True


def get_last_check_time():
    try:
        return os.stat(LAST_CHECK_FILE).st_mtime
    except FileNotFoundError:
        return 0


def set_last_check_time():
    try:
        os.utime(LAST_CHECK_FILE, None)
    except FileNotFoundError:
        with open(LAST_CHECK_FILE, 'w'):
            pass


def is_default_route_via_dev(netdev):
    output = subprocess.check_output(["ip", "route"], universal_newlines=True)
    search = ' dev ' + netdev + ' '
    for line in output.splitlines():
        if line.startswith("default") and search in line:
            return True
    return False


def ping_hosts(addrs):
    # Try a number of times to allow for flaky connections. We want to
    # be really sure the link is down before taking action.
    for _ in range(5):
        for addr in addrs:
            if ping_host(addr):
                return True
    return False


def ping_host(addr):
    try:
        subprocess.check_call(
            [
                'ping',
                '-n', '-q',    # no DNS, quiet output
                '-c', '1',     # just need one response
                '-w', '30',    # wait up to 30s
                addr,
            ],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL)
    except subprocess.CalledProcessError:
        return False
    return True


if __name__ == '__main__':
    sys.exit(main())
